// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: backend.proto

package backend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BackendServiceClient is the client API for BackendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	RenewToken(ctx context.Context, in *RenewTokenRequest, opts ...grpc.CallOption) (*RenewTokenResponse, error)
	GracefulExit(ctx context.Context, in *GracefulExitRequest, opts ...grpc.CallOption) (*GracefulExitResponse, error)
	GetProblem(ctx context.Context, in *GetProblemRequest, opts ...grpc.CallOption) (*GetProblemResponse, error)
	FetchJudgeTask(ctx context.Context, in *FetchJudgeTaskRequest, opts ...grpc.CallOption) (*FetchJudgeTaskResponse, error)
	CompleteJudgeTask(ctx context.Context, in *CompleteJudgeTaskRequest, opts ...grpc.CallOption) (*CompleteJudgeTaskResponse, error)
	PutResource(ctx context.Context, in *PutResourceRequest, opts ...grpc.CallOption) (*PutResourceResponse, error)
	PutResourceBatch(ctx context.Context, in *PutResourceBatchRequest, opts ...grpc.CallOption) (*PutResourceBatchResponse, error)
	GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
	GetResourceBatch(ctx context.Context, in *GetResourceBatchRequest, opts ...grpc.CallOption) (*GetResourceBatchResponse, error)
}

type backendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendServiceClient(cc grpc.ClientConnInterface) BackendServiceClient {
	return &backendServiceClient{cc}
}

func (c *backendServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/signal.backend.BackendService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) RenewToken(ctx context.Context, in *RenewTokenRequest, opts ...grpc.CallOption) (*RenewTokenResponse, error) {
	out := new(RenewTokenResponse)
	err := c.cc.Invoke(ctx, "/signal.backend.BackendService/RenewToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GracefulExit(ctx context.Context, in *GracefulExitRequest, opts ...grpc.CallOption) (*GracefulExitResponse, error) {
	out := new(GracefulExitResponse)
	err := c.cc.Invoke(ctx, "/signal.backend.BackendService/GracefulExit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetProblem(ctx context.Context, in *GetProblemRequest, opts ...grpc.CallOption) (*GetProblemResponse, error) {
	out := new(GetProblemResponse)
	err := c.cc.Invoke(ctx, "/signal.backend.BackendService/GetProblem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) FetchJudgeTask(ctx context.Context, in *FetchJudgeTaskRequest, opts ...grpc.CallOption) (*FetchJudgeTaskResponse, error) {
	out := new(FetchJudgeTaskResponse)
	err := c.cc.Invoke(ctx, "/signal.backend.BackendService/FetchJudgeTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) CompleteJudgeTask(ctx context.Context, in *CompleteJudgeTaskRequest, opts ...grpc.CallOption) (*CompleteJudgeTaskResponse, error) {
	out := new(CompleteJudgeTaskResponse)
	err := c.cc.Invoke(ctx, "/signal.backend.BackendService/CompleteJudgeTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) PutResource(ctx context.Context, in *PutResourceRequest, opts ...grpc.CallOption) (*PutResourceResponse, error) {
	out := new(PutResourceResponse)
	err := c.cc.Invoke(ctx, "/signal.backend.BackendService/PutResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) PutResourceBatch(ctx context.Context, in *PutResourceBatchRequest, opts ...grpc.CallOption) (*PutResourceBatchResponse, error) {
	out := new(PutResourceBatchResponse)
	err := c.cc.Invoke(ctx, "/signal.backend.BackendService/PutResourceBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, "/signal.backend.BackendService/GetResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetResourceBatch(ctx context.Context, in *GetResourceBatchRequest, opts ...grpc.CallOption) (*GetResourceBatchResponse, error) {
	out := new(GetResourceBatchResponse)
	err := c.cc.Invoke(ctx, "/signal.backend.BackendService/GetResourceBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendServiceServer is the server API for BackendService service.
// All implementations must embed UnimplementedBackendServiceServer
// for forward compatibility
type BackendServiceServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	RenewToken(context.Context, *RenewTokenRequest) (*RenewTokenResponse, error)
	GracefulExit(context.Context, *GracefulExitRequest) (*GracefulExitResponse, error)
	GetProblem(context.Context, *GetProblemRequest) (*GetProblemResponse, error)
	FetchJudgeTask(context.Context, *FetchJudgeTaskRequest) (*FetchJudgeTaskResponse, error)
	CompleteJudgeTask(context.Context, *CompleteJudgeTaskRequest) (*CompleteJudgeTaskResponse, error)
	PutResource(context.Context, *PutResourceRequest) (*PutResourceResponse, error)
	PutResourceBatch(context.Context, *PutResourceBatchRequest) (*PutResourceBatchResponse, error)
	GetResource(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	GetResourceBatch(context.Context, *GetResourceBatchRequest) (*GetResourceBatchResponse, error)
	mustEmbedUnimplementedBackendServiceServer()
}

// UnimplementedBackendServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBackendServiceServer struct {
}

func (UnimplementedBackendServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedBackendServiceServer) RenewToken(context.Context, *RenewTokenRequest) (*RenewTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewToken not implemented")
}
func (UnimplementedBackendServiceServer) GracefulExit(context.Context, *GracefulExitRequest) (*GracefulExitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GracefulExit not implemented")
}
func (UnimplementedBackendServiceServer) GetProblem(context.Context, *GetProblemRequest) (*GetProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblem not implemented")
}
func (UnimplementedBackendServiceServer) FetchJudgeTask(context.Context, *FetchJudgeTaskRequest) (*FetchJudgeTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchJudgeTask not implemented")
}
func (UnimplementedBackendServiceServer) CompleteJudgeTask(context.Context, *CompleteJudgeTaskRequest) (*CompleteJudgeTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteJudgeTask not implemented")
}
func (UnimplementedBackendServiceServer) PutResource(context.Context, *PutResourceRequest) (*PutResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutResource not implemented")
}
func (UnimplementedBackendServiceServer) PutResourceBatch(context.Context, *PutResourceBatchRequest) (*PutResourceBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutResourceBatch not implemented")
}
func (UnimplementedBackendServiceServer) GetResource(context.Context, *GetResourceRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedBackendServiceServer) GetResourceBatch(context.Context, *GetResourceBatchRequest) (*GetResourceBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceBatch not implemented")
}
func (UnimplementedBackendServiceServer) mustEmbedUnimplementedBackendServiceServer() {}

// UnsafeBackendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendServiceServer will
// result in compilation errors.
type UnsafeBackendServiceServer interface {
	mustEmbedUnimplementedBackendServiceServer()
}

func RegisterBackendServiceServer(s grpc.ServiceRegistrar, srv BackendServiceServer) {
	s.RegisterService(&BackendService_ServiceDesc, srv)
}

func _BackendService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signal.backend.BackendService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_RenewToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).RenewToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signal.backend.BackendService/RenewToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).RenewToken(ctx, req.(*RenewTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GracefulExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GracefulExitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GracefulExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signal.backend.BackendService/GracefulExit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GracefulExit(ctx, req.(*GracefulExitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signal.backend.BackendService/GetProblem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetProblem(ctx, req.(*GetProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_FetchJudgeTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchJudgeTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).FetchJudgeTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signal.backend.BackendService/FetchJudgeTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).FetchJudgeTask(ctx, req.(*FetchJudgeTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_CompleteJudgeTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteJudgeTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).CompleteJudgeTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signal.backend.BackendService/CompleteJudgeTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).CompleteJudgeTask(ctx, req.(*CompleteJudgeTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_PutResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).PutResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signal.backend.BackendService/PutResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).PutResource(ctx, req.(*PutResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_PutResourceBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutResourceBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).PutResourceBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signal.backend.BackendService/PutResourceBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).PutResourceBatch(ctx, req.(*PutResourceBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signal.backend.BackendService/GetResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetResource(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetResourceBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetResourceBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signal.backend.BackendService/GetResourceBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetResourceBatch(ctx, req.(*GetResourceBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackendService_ServiceDesc is the grpc.ServiceDesc for BackendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "signal.backend.BackendService",
	HandlerType: (*BackendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _BackendService_Register_Handler,
		},
		{
			MethodName: "RenewToken",
			Handler:    _BackendService_RenewToken_Handler,
		},
		{
			MethodName: "GracefulExit",
			Handler:    _BackendService_GracefulExit_Handler,
		},
		{
			MethodName: "GetProblem",
			Handler:    _BackendService_GetProblem_Handler,
		},
		{
			MethodName: "FetchJudgeTask",
			Handler:    _BackendService_FetchJudgeTask_Handler,
		},
		{
			MethodName: "CompleteJudgeTask",
			Handler:    _BackendService_CompleteJudgeTask_Handler,
		},
		{
			MethodName: "PutResource",
			Handler:    _BackendService_PutResource_Handler,
		},
		{
			MethodName: "PutResourceBatch",
			Handler:    _BackendService_PutResourceBatch_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _BackendService_GetResource_Handler,
		},
		{
			MethodName: "GetResourceBatch",
			Handler:    _BackendService_GetResourceBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend.proto",
}
