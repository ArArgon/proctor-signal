// Code generated by MockGen. DO NOT EDIT.
// Source: proctor-signal/external/backend (interfaces: Client)

// Package mock_backend is a generated GoMock package.
package mock_backend

import (
	context "context"
	io "io"
	backend "proctor-signal/external/backend"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CompleteJudgeTask mocks base method.
func (m *MockClient) CompleteJudgeTask(arg0 context.Context, arg1 *backend.CompleteJudgeTaskRequest, arg2 ...grpc.CallOption) (*backend.CompleteJudgeTaskResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompleteJudgeTask", varargs...)
	ret0, _ := ret[0].(*backend.CompleteJudgeTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteJudgeTask indicates an expected call of CompleteJudgeTask.
func (mr *MockClientMockRecorder) CompleteJudgeTask(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteJudgeTask", reflect.TypeOf((*MockClient)(nil).CompleteJudgeTask), varargs...)
}

// FetchJudgeTask mocks base method.
func (m *MockClient) FetchJudgeTask(arg0 context.Context, arg1 *backend.FetchJudgeTaskRequest, arg2 ...grpc.CallOption) (*backend.FetchJudgeTaskResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchJudgeTask", varargs...)
	ret0, _ := ret[0].(*backend.FetchJudgeTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchJudgeTask indicates an expected call of FetchJudgeTask.
func (mr *MockClientMockRecorder) FetchJudgeTask(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchJudgeTask", reflect.TypeOf((*MockClient)(nil).FetchJudgeTask), varargs...)
}

// GetProblem mocks base method.
func (m *MockClient) GetProblem(arg0 context.Context, arg1 *backend.GetProblemRequest, arg2 ...grpc.CallOption) (*backend.GetProblemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProblem", varargs...)
	ret0, _ := ret[0].(*backend.GetProblemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProblem indicates an expected call of GetProblem.
func (mr *MockClientMockRecorder) GetProblem(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProblem", reflect.TypeOf((*MockClient)(nil).GetProblem), varargs...)
}

// GetResource mocks base method.
func (m *MockClient) GetResource(arg0 context.Context, arg1 *backend.GetResourceRequest, arg2 ...grpc.CallOption) (*backend.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResource", varargs...)
	ret0, _ := ret[0].(*backend.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockClientMockRecorder) GetResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockClient)(nil).GetResource), varargs...)
}

// GetResourceBatch mocks base method.
func (m *MockClient) GetResourceBatch(arg0 context.Context, arg1 *backend.GetResourceBatchRequest, arg2 ...grpc.CallOption) (*backend.GetResourceBatchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourceBatch", varargs...)
	ret0, _ := ret[0].(*backend.GetResourceBatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceBatch indicates an expected call of GetResourceBatch.
func (mr *MockClientMockRecorder) GetResourceBatch(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceBatch", reflect.TypeOf((*MockClient)(nil).GetResourceBatch), varargs...)
}

// GetResourceStream mocks base method.
func (m *MockClient) GetResourceStream(arg0 context.Context, arg1 backend.ResourceType, arg2 string) (int64, io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceStream", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetResourceStream indicates an expected call of GetResourceStream.
func (mr *MockClientMockRecorder) GetResourceStream(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceStream", reflect.TypeOf((*MockClient)(nil).GetResourceStream), arg0, arg1, arg2)
}

// PutResource mocks base method.
func (m *MockClient) PutResource(arg0 context.Context, arg1 *backend.PutResourceRequest, arg2 ...grpc.CallOption) (*backend.PutResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutResource", varargs...)
	ret0, _ := ret[0].(*backend.PutResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResource indicates an expected call of PutResource.
func (mr *MockClientMockRecorder) PutResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResource", reflect.TypeOf((*MockClient)(nil).PutResource), varargs...)
}

// PutResourceBatch mocks base method.
func (m *MockClient) PutResourceBatch(arg0 context.Context, arg1 *backend.PutResourceBatchRequest, arg2 ...grpc.CallOption) (*backend.PutResourceBatchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutResourceBatch", varargs...)
	ret0, _ := ret[0].(*backend.PutResourceBatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResourceBatch indicates an expected call of PutResourceBatch.
func (mr *MockClientMockRecorder) PutResourceBatch(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourceBatch", reflect.TypeOf((*MockClient)(nil).PutResourceBatch), varargs...)
}

// PutResourceStream mocks base method.
func (m *MockClient) PutResourceStream(arg0 context.Context, arg1 backend.ResourceType, arg2 int64, arg3 io.ReadCloser) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResourceStream", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResourceStream indicates an expected call of PutResourceStream.
func (mr *MockClientMockRecorder) PutResourceStream(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourceStream", reflect.TypeOf((*MockClient)(nil).PutResourceStream), arg0, arg1, arg2, arg3)
}

// ReportExit mocks base method.
func (m *MockClient) ReportExit(arg0 context.Context, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportExit", arg0, arg1)
}

// ReportExit indicates an expected call of ReportExit.
func (mr *MockClientMockRecorder) ReportExit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportExit", reflect.TypeOf((*MockClient)(nil).ReportExit), arg0, arg1)
}
