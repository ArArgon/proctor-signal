// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: model.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DiffPolicy int32

const (
	DiffPolicy_LINE    DiffPolicy = 0
	DiffPolicy_INTEGER DiffPolicy = 1
	DiffPolicy_FLOAT   DiffPolicy = 2
	DiffPolicy_BINARY  DiffPolicy = 3
	DiffPolicy_CUSTOM  DiffPolicy = 4
)

// Enum value maps for DiffPolicy.
var (
	DiffPolicy_name = map[int32]string{
		0: "LINE",
		1: "INTEGER",
		2: "FLOAT",
		3: "BINARY",
		4: "CUSTOM",
	}
	DiffPolicy_value = map[string]int32{
		"LINE":    0,
		"INTEGER": 1,
		"FLOAT":   2,
		"BINARY":  3,
		"CUSTOM":  4,
	}
)

func (x DiffPolicy) Enum() *DiffPolicy {
	p := new(DiffPolicy)
	*p = x
	return p
}

func (x DiffPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiffPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_model_proto_enumTypes[0].Descriptor()
}

func (DiffPolicy) Type() protoreflect.EnumType {
	return &file_model_proto_enumTypes[0]
}

func (x DiffPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiffPolicy.Descriptor instead.
func (DiffPolicy) EnumDescriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{0}
}

type ScorePolicy int32

const (
	// Scored by the sum of all testcases.
	ScorePolicy_SUM ScorePolicy = 0
	// Scored by the minimum score amongst all testcases.
	ScorePolicy_MIN ScorePolicy = 1
	// Scored by the average.
	ScorePolicy_PCT ScorePolicy = 2
)

// Enum value maps for ScorePolicy.
var (
	ScorePolicy_name = map[int32]string{
		0: "SUM",
		1: "MIN",
		2: "PCT",
	}
	ScorePolicy_value = map[string]int32{
		"SUM": 0,
		"MIN": 1,
		"PCT": 2,
	}
)

func (x ScorePolicy) Enum() *ScorePolicy {
	p := new(ScorePolicy)
	*p = x
	return p
}

func (x ScorePolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScorePolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_model_proto_enumTypes[1].Descriptor()
}

func (ScorePolicy) Type() protoreflect.EnumType {
	return &file_model_proto_enumTypes[1]
}

func (x ScorePolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScorePolicy.Descriptor instead.
func (ScorePolicy) EnumDescriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{1}
}

type Conclusion int32

const (
	// copied from go-judge.
	Conclusion_Invalid             Conclusion = 0
	Conclusion_Accepted            Conclusion = 1
	Conclusion_WrongAnswer         Conclusion = 2 // Not used
	Conclusion_PartiallyCorrect    Conclusion = 3 // Not used
	Conclusion_MemoryLimitExceeded Conclusion = 4
	Conclusion_TimeLimitExceeded   Conclusion = 5
	Conclusion_OutputLimitExceeded Conclusion = 6
	Conclusion_FileError           Conclusion = 7
	Conclusion_NonZeroExitStatus   Conclusion = 8
	Conclusion_Signalled           Conclusion = 9
	Conclusion_DangerousSyscall    Conclusion = 10
	Conclusion_JudgementFailed     Conclusion = 11 // Not used
	Conclusion_InvalidInteraction  Conclusion = 12 // Not used
	Conclusion_InternalError       Conclusion = 13
)

// Enum value maps for Conclusion.
var (
	Conclusion_name = map[int32]string{
		0:  "Invalid",
		1:  "Accepted",
		2:  "WrongAnswer",
		3:  "PartiallyCorrect",
		4:  "MemoryLimitExceeded",
		5:  "TimeLimitExceeded",
		6:  "OutputLimitExceeded",
		7:  "FileError",
		8:  "NonZeroExitStatus",
		9:  "Signalled",
		10: "DangerousSyscall",
		11: "JudgementFailed",
		12: "InvalidInteraction",
		13: "InternalError",
	}
	Conclusion_value = map[string]int32{
		"Invalid":             0,
		"Accepted":            1,
		"WrongAnswer":         2,
		"PartiallyCorrect":    3,
		"MemoryLimitExceeded": 4,
		"TimeLimitExceeded":   5,
		"OutputLimitExceeded": 6,
		"FileError":           7,
		"NonZeroExitStatus":   8,
		"Signalled":           9,
		"DangerousSyscall":    10,
		"JudgementFailed":     11,
		"InvalidInteraction":  12,
		"InternalError":       13,
	}
)

func (x Conclusion) Enum() *Conclusion {
	p := new(Conclusion)
	*p = x
	return p
}

func (x Conclusion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Conclusion) Descriptor() protoreflect.EnumDescriptor {
	return file_model_proto_enumTypes[2].Descriptor()
}

func (Conclusion) Type() protoreflect.EnumType {
	return &file_model_proto_enumTypes[2]
}

func (x Conclusion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Conclusion.Descriptor instead.
func (Conclusion) EnumDescriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{2}
}

type Problem_ProblemKind int32

const (
	// Classic comparison-based.
	Problem_CLASSIC Problem_ProblemKind = 0
	// Special-judge required.
	Problem_SPECIAL Problem_ProblemKind = 1
)

// Enum value maps for Problem_ProblemKind.
var (
	Problem_ProblemKind_name = map[int32]string{
		0: "CLASSIC",
		1: "SPECIAL",
	}
	Problem_ProblemKind_value = map[string]int32{
		"CLASSIC": 0,
		"SPECIAL": 1,
	}
)

func (x Problem_ProblemKind) Enum() *Problem_ProblemKind {
	p := new(Problem_ProblemKind)
	*p = x
	return p
}

func (x Problem_ProblemKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Problem_ProblemKind) Descriptor() protoreflect.EnumDescriptor {
	return file_model_proto_enumTypes[3].Descriptor()
}

func (Problem_ProblemKind) Type() protoreflect.EnumType {
	return &file_model_proto_enumTypes[3]
}

func (x Problem_ProblemKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Problem_ProblemKind.Descriptor instead.
func (Problem_ProblemKind) EnumDescriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{0, 0}
}

type Problem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Problem ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Problem version.
	Ver string `protobuf:"bytes,2,opt,name=ver,proto3" json:"ver,omitempty"`
	// Problem type.
	Kind Problem_ProblemKind `protobuf:"varint,3,opt,name=kind,proto3,enum=signal.model.Problem_ProblemKind" json:"kind,omitempty"`
	// Output diff policy, only applicable for the `classic` type.
	DiffPolicy DiffPolicy `protobuf:"varint,4,opt,name=diff_policy,json=diffPolicy,proto3,enum=signal.model.DiffPolicy" json:"diff_policy,omitempty"`
	// Special Judge program key.
	SpjBinaryKey *string `protobuf:"bytes,5,opt,name=spj_binary_key,json=spjBinaryKey,proto3,oneof" json:"spj_binary_key,omitempty"`
	// Whether the diff ignores the last new line.
	IgnoreNewline bool `protobuf:"varint,6,opt,name=ignore_newline,json=ignoreNewline,proto3" json:"ignore_newline,omitempty"`
	// Whether the diff is case-sensitive.
	CaseSensitive bool `protobuf:"varint,7,opt,name=case_sensitive,json=caseSensitive,proto3" json:"case_sensitive,omitempty"`
	// Float epsilon in `FLOAT` mode.
	FloatEps *uint32 `protobuf:"varint,8,opt,name=float_eps,json=floatEps,proto3,oneof" json:"float_eps,omitempty"`
	// The input file name. Empty if `from_stdin` is true.
	InputFile string `protobuf:"bytes,9,opt,name=input_file,json=inputFile,proto3" json:"input_file,omitempty"`
	// Indicates whether the testing program will read from stdin.
	FromStdin bool `protobuf:"varint,10,opt,name=from_stdin,json=fromStdin,proto3" json:"from_stdin,omitempty"`
	// The output file name. Empty if `from_stdout` is true.
	OutputFile string `protobuf:"bytes,11,opt,name=output_file,json=outputFile,proto3" json:"output_file,omitempty"`
	// Indicates whether the testing program will write answer to stdin.
	FromStdout bool `protobuf:"varint,12,opt,name=from_stdout,json=fromStdout,proto3" json:"from_stdout,omitempty"`
	// Default time limit for each test case (in milliseconds). It can be overridden by lower-level constraints.
	DefaultTimeLimit uint32 `protobuf:"varint,13,opt,name=default_time_limit,json=defaultTimeLimit,proto3" json:"default_time_limit,omitempty"`
	// Default space limit for each test case (in MiB). It can be overridden by lower-level constraints.
	DefaultSpaceLimit uint32 `protobuf:"varint,14,opt,name=default_space_limit,json=defaultSpaceLimit,proto3" json:"default_space_limit,omitempty"`
	// Subtasks.
	Subtasks []*Subtask `protobuf:"bytes,21,rep,name=subtasks,proto3" json:"subtasks,omitempty"`
}

func (x *Problem) Reset() {
	*x = Problem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Problem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Problem) ProtoMessage() {}

func (x *Problem) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Problem.ProtoReflect.Descriptor instead.
func (*Problem) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{0}
}

func (x *Problem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Problem) GetVer() string {
	if x != nil {
		return x.Ver
	}
	return ""
}

func (x *Problem) GetKind() Problem_ProblemKind {
	if x != nil {
		return x.Kind
	}
	return Problem_CLASSIC
}

func (x *Problem) GetDiffPolicy() DiffPolicy {
	if x != nil {
		return x.DiffPolicy
	}
	return DiffPolicy_LINE
}

func (x *Problem) GetSpjBinaryKey() string {
	if x != nil && x.SpjBinaryKey != nil {
		return *x.SpjBinaryKey
	}
	return ""
}

func (x *Problem) GetIgnoreNewline() bool {
	if x != nil {
		return x.IgnoreNewline
	}
	return false
}

func (x *Problem) GetCaseSensitive() bool {
	if x != nil {
		return x.CaseSensitive
	}
	return false
}

func (x *Problem) GetFloatEps() uint32 {
	if x != nil && x.FloatEps != nil {
		return *x.FloatEps
	}
	return 0
}

func (x *Problem) GetInputFile() string {
	if x != nil {
		return x.InputFile
	}
	return ""
}

func (x *Problem) GetFromStdin() bool {
	if x != nil {
		return x.FromStdin
	}
	return false
}

func (x *Problem) GetOutputFile() string {
	if x != nil {
		return x.OutputFile
	}
	return ""
}

func (x *Problem) GetFromStdout() bool {
	if x != nil {
		return x.FromStdout
	}
	return false
}

func (x *Problem) GetDefaultTimeLimit() uint32 {
	if x != nil {
		return x.DefaultTimeLimit
	}
	return 0
}

func (x *Problem) GetDefaultSpaceLimit() uint32 {
	if x != nil {
		return x.DefaultSpaceLimit
	}
	return 0
}

func (x *Problem) GetSubtasks() []*Subtask {
	if x != nil {
		return x.Subtasks
	}
	return nil
}

type Subtask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Conclusion.
	Conclusion Conclusion `protobuf:"varint,2,opt,name=conclusion,proto3,enum=signal.model.Conclusion" json:"conclusion,omitempty"`
	// Total score of this subtask.
	Score int32 `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	// Score policy of this subtask.
	ScorePolicy ScorePolicy `protobuf:"varint,4,opt,name=score_policy,json=scorePolicy,proto3,enum=signal.model.ScorePolicy" json:"score_policy,omitempty"`
	// Dependencies. This subtask will be scored iff all its dependencies have passed (accepted).
	Dependencies []uint32 `protobuf:"varint,5,rep,packed,name=dependencies,proto3" json:"dependencies,omitempty"`
	// Subtask-level time limitation, which, if any, overrides problem-level constraint.
	TimeLimit *uint32 `protobuf:"varint,6,opt,name=time_limit,json=timeLimit,proto3,oneof" json:"time_limit,omitempty"`
	// Subtask-level space limitation, which, if any, overrides problem-level constraint.
	SpaceLimit *uint32 `protobuf:"varint,7,opt,name=space_limit,json=spaceLimit,proto3,oneof" json:"space_limit,omitempty"`
	// All attached test cases.
	TestCases []*TestCase `protobuf:"bytes,8,rep,name=test_cases,json=testCases,proto3" json:"test_cases,omitempty"`
}

func (x *Subtask) Reset() {
	*x = Subtask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subtask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subtask) ProtoMessage() {}

func (x *Subtask) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subtask.ProtoReflect.Descriptor instead.
func (*Subtask) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{1}
}

func (x *Subtask) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Subtask) GetConclusion() Conclusion {
	if x != nil {
		return x.Conclusion
	}
	return Conclusion_Invalid
}

func (x *Subtask) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Subtask) GetScorePolicy() ScorePolicy {
	if x != nil {
		return x.ScorePolicy
	}
	return ScorePolicy_SUM
}

func (x *Subtask) GetDependencies() []uint32 {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *Subtask) GetTimeLimit() uint32 {
	if x != nil && x.TimeLimit != nil {
		return *x.TimeLimit
	}
	return 0
}

func (x *Subtask) GetSpaceLimit() uint32 {
	if x != nil && x.SpaceLimit != nil {
		return *x.SpaceLimit
	}
	return 0
}

func (x *Subtask) GetTestCases() []*TestCase {
	if x != nil {
		return x.TestCases
	}
	return nil
}

type TestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Input data key.
	InputKey string `protobuf:"bytes,2,opt,name=input_key,json=inputKey,proto3" json:"input_key,omitempty"`
	// Indicate the size of the input data.
	InputSize uint64 `protobuf:"varint,3,opt,name=input_size,json=inputSize,proto3" json:"input_size,omitempty"`
	// Reference output key.
	OutputKey string `protobuf:"bytes,4,opt,name=output_key,json=outputKey,proto3" json:"output_key,omitempty"`
	// Indicate the size of the reference output.
	OutputSize uint64 `protobuf:"varint,5,opt,name=output_size,json=outputSize,proto3" json:"output_size,omitempty"`
}

func (x *TestCase) Reset() {
	*x = TestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCase) ProtoMessage() {}

func (x *TestCase) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCase.ProtoReflect.Descriptor instead.
func (*TestCase) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{2}
}

func (x *TestCase) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TestCase) GetInputKey() string {
	if x != nil {
		return x.InputKey
	}
	return ""
}

func (x *TestCase) GetInputSize() uint64 {
	if x != nil {
		return x.InputSize
	}
	return 0
}

func (x *TestCase) GetOutputKey() string {
	if x != nil {
		return x.OutputKey
	}
	return ""
}

func (x *TestCase) GetOutputSize() uint64 {
	if x != nil {
		return x.OutputSize
	}
	return 0
}

type Submission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProblemId  string `protobuf:"bytes,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	ProblemVer string `protobuf:"bytes,3,opt,name=problem_ver,json=problemVer,proto3" json:"problem_ver,omitempty"`
	// The programming language the code of this submission uses.
	Language string `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// The compiler option the code of this submission uses.
	CompilerOption string `protobuf:"bytes,5,opt,name=compiler_option,json=compilerOption,proto3" json:"compiler_option,omitempty"`
	SourceCode     []byte `protobuf:"bytes,6,opt,name=source_code,json=sourceCode,proto3" json:"source_code,omitempty"`
}

func (x *Submission) Reset() {
	*x = Submission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Submission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Submission) ProtoMessage() {}

func (x *Submission) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Submission.ProtoReflect.Descriptor instead.
func (*Submission) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{3}
}

func (x *Submission) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Submission) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *Submission) GetProblemVer() string {
	if x != nil {
		return x.ProblemVer
	}
	return ""
}

func (x *Submission) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Submission) GetCompilerOption() string {
	if x != nil {
		return x.CompilerOption
	}
	return ""
}

func (x *Submission) GetSourceCode() []byte {
	if x != nil {
		return x.SourceCode
	}
	return nil
}

type JudgeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmissionId string `protobuf:"bytes,1,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
	ProblemId    string `protobuf:"bytes,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	// The timestamp when the submission was received.
	ReceiveTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=receive_time,json=receiveTime,proto3" json:"receive_time,omitempty"`
	// The timestamp when the submission was scored.
	CompleteTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=complete_time,json=completeTime,proto3" json:"complete_time,omitempty"`
	Conclusion   Conclusion             `protobuf:"varint,5,opt,name=conclusion,proto3,enum=signal.model.Conclusion" json:"conclusion,omitempty"`
	// This field carries the internal error message.
	ErrMessage     *string          `protobuf:"bytes,6,opt,name=err_message,json=errMessage,proto3,oneof" json:"err_message,omitempty"`
	Score          int32            `protobuf:"varint,7,opt,name=score,proto3" json:"score,omitempty"`
	TotalTime      uint32           `protobuf:"varint,8,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	TotalSpace     float32          `protobuf:"fixed32,9,opt,name=total_space,json=totalSpace,proto3" json:"total_space,omitempty"`
	CompilerOutput *string          `protobuf:"bytes,10,opt,name=compiler_output,json=compilerOutput,proto3,oneof" json:"compiler_output,omitempty"`
	SubtaskResults []*SubtaskResult `protobuf:"bytes,11,rep,name=subtask_results,json=subtaskResults,proto3" json:"subtask_results,omitempty"`
}

func (x *JudgeResult) Reset() {
	*x = JudgeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JudgeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JudgeResult) ProtoMessage() {}

func (x *JudgeResult) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JudgeResult.ProtoReflect.Descriptor instead.
func (*JudgeResult) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{4}
}

func (x *JudgeResult) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

func (x *JudgeResult) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *JudgeResult) GetReceiveTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveTime
	}
	return nil
}

func (x *JudgeResult) GetCompleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CompleteTime
	}
	return nil
}

func (x *JudgeResult) GetConclusion() Conclusion {
	if x != nil {
		return x.Conclusion
	}
	return Conclusion_Invalid
}

func (x *JudgeResult) GetErrMessage() string {
	if x != nil && x.ErrMessage != nil {
		return *x.ErrMessage
	}
	return ""
}

func (x *JudgeResult) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *JudgeResult) GetTotalTime() uint32 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

func (x *JudgeResult) GetTotalSpace() float32 {
	if x != nil {
		return x.TotalSpace
	}
	return 0
}

func (x *JudgeResult) GetCompilerOutput() string {
	if x != nil && x.CompilerOutput != nil {
		return *x.CompilerOutput
	}
	return ""
}

func (x *JudgeResult) GetSubtaskResults() []*SubtaskResult {
	if x != nil {
		return x.SubtaskResults
	}
	return nil
}

type SubtaskResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Indicates whether this subtask has been run. When some of its dependencies failed, this subtask
	// is not scored.
	IsRun       bool          `protobuf:"varint,2,opt,name=is_run,json=isRun,proto3" json:"is_run,omitempty"`
	Score       int32         `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	ScorePolicy ScorePolicy   `protobuf:"varint,4,opt,name=score_policy,json=scorePolicy,proto3,enum=signal.model.ScorePolicy" json:"score_policy,omitempty"`
	Conclusion  Conclusion    `protobuf:"varint,5,opt,name=conclusion,proto3,enum=signal.model.Conclusion" json:"conclusion,omitempty"`
	TotalTime   uint32        `protobuf:"varint,7,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	TotalSpace  float32       `protobuf:"fixed32,8,opt,name=total_space,json=totalSpace,proto3" json:"total_space,omitempty"`
	CaseResults []*CaseResult `protobuf:"bytes,9,rep,name=case_results,json=caseResults,proto3" json:"case_results,omitempty"`
}

func (x *SubtaskResult) Reset() {
	*x = SubtaskResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubtaskResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubtaskResult) ProtoMessage() {}

func (x *SubtaskResult) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubtaskResult.ProtoReflect.Descriptor instead.
func (*SubtaskResult) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{5}
}

func (x *SubtaskResult) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubtaskResult) GetIsRun() bool {
	if x != nil {
		return x.IsRun
	}
	return false
}

func (x *SubtaskResult) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SubtaskResult) GetScorePolicy() ScorePolicy {
	if x != nil {
		return x.ScorePolicy
	}
	return ScorePolicy_SUM
}

func (x *SubtaskResult) GetConclusion() Conclusion {
	if x != nil {
		return x.Conclusion
	}
	return Conclusion_Invalid
}

func (x *SubtaskResult) GetTotalTime() uint32 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

func (x *SubtaskResult) GetTotalSpace() float32 {
	if x != nil {
		return x.TotalSpace
	}
	return 0
}

func (x *SubtaskResult) GetCaseResults() []*CaseResult {
	if x != nil {
		return x.CaseResults
	}
	return nil
}

type CaseResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Score      int32      `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	Conclusion Conclusion `protobuf:"varint,5,opt,name=conclusion,proto3,enum=signal.model.Conclusion" json:"conclusion,omitempty"`
	DiffPolicy DiffPolicy `protobuf:"varint,6,opt,name=diff_policy,json=diffPolicy,proto3,enum=signal.model.DiffPolicy" json:"diff_policy,omitempty"`
	// Total time this case spent in MiB.
	TotalTime uint32 `protobuf:"varint,7,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	// Total space this case used in MiB.
	TotalSpace float32 `protobuf:"fixed32,8,opt,name=total_space,json=totalSpace,proto3" json:"total_space,omitempty"`
	// The return value of the test program in this case.
	ReturnValue int32 `protobuf:"varint,9,opt,name=return_value,json=returnValue,proto3" json:"return_value,omitempty"`
	// The key of tester's output.
	OutputKey string `protobuf:"bytes,10,opt,name=output_key,json=outputKey,proto3" json:"output_key,omitempty"`
	// The size (in bytes) of tester's output.
	OutputSize uint64 `protobuf:"varint,11,opt,name=output_size,json=outputSize,proto3" json:"output_size,omitempty"`
	// The truncated output (first 1 KiB).
	TruncatedOutput *string `protobuf:"bytes,12,opt,name=truncated_output,json=truncatedOutput,proto3,oneof" json:"truncated_output,omitempty"`
}

func (x *CaseResult) Reset() {
	*x = CaseResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaseResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseResult) ProtoMessage() {}

func (x *CaseResult) ProtoReflect() protoreflect.Message {
	mi := &file_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseResult.ProtoReflect.Descriptor instead.
func (*CaseResult) Descriptor() ([]byte, []int) {
	return file_model_proto_rawDescGZIP(), []int{6}
}

func (x *CaseResult) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CaseResult) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *CaseResult) GetConclusion() Conclusion {
	if x != nil {
		return x.Conclusion
	}
	return Conclusion_Invalid
}

func (x *CaseResult) GetDiffPolicy() DiffPolicy {
	if x != nil {
		return x.DiffPolicy
	}
	return DiffPolicy_LINE
}

func (x *CaseResult) GetTotalTime() uint32 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

func (x *CaseResult) GetTotalSpace() float32 {
	if x != nil {
		return x.TotalSpace
	}
	return 0
}

func (x *CaseResult) GetReturnValue() int32 {
	if x != nil {
		return x.ReturnValue
	}
	return 0
}

func (x *CaseResult) GetOutputKey() string {
	if x != nil {
		return x.OutputKey
	}
	return ""
}

func (x *CaseResult) GetOutputSize() uint64 {
	if x != nil {
		return x.OutputSize
	}
	return 0
}

func (x *CaseResult) GetTruncatedOutput() string {
	if x != nil && x.TruncatedOutput != nil {
		return *x.TruncatedOutput
	}
	return ""
}

var File_model_proto protoreflect.FileDescriptor

var file_model_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99, 0x05, 0x0a,
	0x07, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x39, 0x0a, 0x0b, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x29, 0x0a, 0x0e,
	0x73, 0x70, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x70, 0x6a, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x5f, 0x6e, 0x65, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4e, 0x65, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x65,
	0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x45, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73,
	0x74, 0x64, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d,
	0x53, 0x74, 0x64, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73,
	0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x72, 0x6f,
	0x6d, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x08,
	0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x27, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x49, 0x43, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x10,
	0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x70, 0x6a, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x65,
	0x70, 0x73, 0x4a, 0x04, 0x08, 0x0f, 0x10, 0x15, 0x22, 0xeb, 0x02, 0x0a, 0x07, 0x53, 0x75, 0x62,
	0x74, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x01, 0x52, 0x0a, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x09, 0x74, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0xc2, 0x01, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x9f, 0x04, 0x0a, 0x0b, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2c,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0f,
	0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xc1, 0x02, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x74, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x72,
	0x75, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x52, 0x75, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3b, 0x0a,
	0x0c, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x63,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x8f, 0x03, 0x0a, 0x0a, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0b, 0x64, 0x69, 0x66,
	0x66, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x69,
	0x66, 0x66, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x10, 0x74, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2a, 0x46, 0x0a, 0x0a,
	0x44, 0x69, 0x66, 0x66, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x10, 0x04, 0x2a, 0x28, 0x0a, 0x0b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4d, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x43, 0x54, 0x10, 0x02, 0x2a, 0xa2,
	0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x72, 0x6f, 0x6e,
	0x67, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x10, 0x03, 0x12,
	0x17, 0x0a, 0x13, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x69, 0x6d, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x05, 0x12,
	0x17, 0x0a, 0x13, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x6f, 0x6e, 0x5a, 0x65,
	0x72, 0x6f, 0x45, 0x78, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x08, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x09, 0x12, 0x14, 0x0a,
	0x10, 0x44, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x6f, 0x75, 0x73, 0x53, 0x79, 0x73, 0x63, 0x61, 0x6c,
	0x6c, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0c,
	0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x0d, 0x42, 0x34, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x6a, 0x6a, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x5a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_model_proto_rawDescOnce sync.Once
	file_model_proto_rawDescData = file_model_proto_rawDesc
)

func file_model_proto_rawDescGZIP() []byte {
	file_model_proto_rawDescOnce.Do(func() {
		file_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_model_proto_rawDescData)
	})
	return file_model_proto_rawDescData
}

var file_model_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_model_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_model_proto_goTypes = []interface{}{
	(DiffPolicy)(0),               // 0: signal.model.DiffPolicy
	(ScorePolicy)(0),              // 1: signal.model.ScorePolicy
	(Conclusion)(0),               // 2: signal.model.Conclusion
	(Problem_ProblemKind)(0),      // 3: signal.model.Problem.ProblemKind
	(*Problem)(nil),               // 4: signal.model.Problem
	(*Subtask)(nil),               // 5: signal.model.Subtask
	(*TestCase)(nil),              // 6: signal.model.TestCase
	(*Submission)(nil),            // 7: signal.model.Submission
	(*JudgeResult)(nil),           // 8: signal.model.JudgeResult
	(*SubtaskResult)(nil),         // 9: signal.model.SubtaskResult
	(*CaseResult)(nil),            // 10: signal.model.CaseResult
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
}
var file_model_proto_depIdxs = []int32{
	3,  // 0: signal.model.Problem.kind:type_name -> signal.model.Problem.ProblemKind
	0,  // 1: signal.model.Problem.diff_policy:type_name -> signal.model.DiffPolicy
	5,  // 2: signal.model.Problem.subtasks:type_name -> signal.model.Subtask
	2,  // 3: signal.model.Subtask.conclusion:type_name -> signal.model.Conclusion
	1,  // 4: signal.model.Subtask.score_policy:type_name -> signal.model.ScorePolicy
	6,  // 5: signal.model.Subtask.test_cases:type_name -> signal.model.TestCase
	11, // 6: signal.model.JudgeResult.receive_time:type_name -> google.protobuf.Timestamp
	11, // 7: signal.model.JudgeResult.complete_time:type_name -> google.protobuf.Timestamp
	2,  // 8: signal.model.JudgeResult.conclusion:type_name -> signal.model.Conclusion
	9,  // 9: signal.model.JudgeResult.subtask_results:type_name -> signal.model.SubtaskResult
	1,  // 10: signal.model.SubtaskResult.score_policy:type_name -> signal.model.ScorePolicy
	2,  // 11: signal.model.SubtaskResult.conclusion:type_name -> signal.model.Conclusion
	10, // 12: signal.model.SubtaskResult.case_results:type_name -> signal.model.CaseResult
	2,  // 13: signal.model.CaseResult.conclusion:type_name -> signal.model.Conclusion
	0,  // 14: signal.model.CaseResult.diff_policy:type_name -> signal.model.DiffPolicy
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_model_proto_init() }
func file_model_proto_init() {
	if File_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Problem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subtask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Submission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JudgeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubtaskResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaseResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_model_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_model_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_model_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_model_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_model_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_model_proto_goTypes,
		DependencyIndexes: file_model_proto_depIdxs,
		EnumInfos:         file_model_proto_enumTypes,
		MessageInfos:      file_model_proto_msgTypes,
	}.Build()
	File_model_proto = out.File
	file_model_proto_rawDesc = nil
	file_model_proto_goTypes = nil
	file_model_proto_depIdxs = nil
}
